create database courier_mgmt
use courier_mgmt;

create table users (
    userid int primary key,
    name varchar(255),
    email varchar(255) unique,
    password varchar(255),
    contactnumber varchar(20),
    address text
);

create table courier (
    courierid int primary key,
    sendername varchar(255),
    senderaddress text,
    receivername varchar(255),
    receiveraddress text,
    weight decimal(5,2),
    status varchar(50),
    trackingnumber varchar(20) unique,
    deliverydate date
);

create table courierservices (
    serviceid int primary key,
    servicename varchar(100),
    cost decimal(8,2)
);

create table employee (
    employeeid int primary key,
    name varchar(255),
    email varchar(255) unique,
    contactnumber varchar(20),
    role varchar(50),
    salary decimal(10,2)
);

create table location (
    locationid int primary key,
    locationname varchar(100),
    address text
);

create table payment (
    paymentid int primary key,
    courierid int,
    locationid int,
    amount decimal(10,2),
    paymentdate date,
    foreign key (courierid) references courier(courierid),
    foreign key (locationid) references location(locationid)
);


insert into users values (1, 'Alice Smith', 'alice@example.com', 'alice123', '1234567890', '123 Elm Street');
insert into users values (2, 'Bob Johnson', 'bob@example.com', 'bob123', '9876543210', '456 Oak Avenue');

insert into courier values 
(101, 'Alice Smith', '123 Elm Street', 'John Doe', '789 Pine Road', 2.5, 'In Transit', 'TRK123456', '2025-04-20'),
(102, 'Bob Johnson', '456 Oak Avenue', 'Jane Roe', '321 Maple Street', 1.2, 'Delivered', 'TRK654321', '2025-04-15');

insert into courierservices values 
(1, 'Standard Delivery', 50.00),
(2, 'Express Delivery', 100.00);

insert into employee values 
(1, 'Eve Adams', 'eve@courier.com', '5551234567', 'Dispatcher', 40000.00),
(2, 'John Carter', 'john@courier.com', '5559876543', 'Delivery', 35000.00);

insert into location values 
(1, 'Central Hub', '12 Distribution Lane'),
(2, 'North Station', '88 Arctic Blvd');

insert into payment values 
(1, 101, 1, 60.00, '2025-04-18'),
(2, 102, 2, 70.00, '2025-04-16');


---Task-2---
---2.1//list all customers
select * from users;

---2.2//List all orders for a specific customer
select * from courier where sendername = 'Alice Smith';

---2.3//List all couriers:
select * from courier;

---2.4//List all packages for a specific order:
select * from courier where courierid = 101;

---2.5//List all deliveries for a specific courier:
select * from courier where trackingnumber = 'TRK123456';

---2.6//List all undelivered packages:
select * from courier where status != 'Delivered';

---2.7//List all packages that are scheduled for delivery today:
select * from courier
where deliverydate = cast(getdate() as date);

---2.8//List all packages with a specific status:
select * from courier where status = 'In Transit';

---2.9//Calculate the total number of packages for each courier.
select sendername, count(*) as total_packages
from courier
group by sendername;

---2.10//. Find the average delivery time for each courier
-- Assuming a column "orderdate" exists
alter table courier add orderdate date;

select courierid, avg(datediff(day, orderdate, deliverydate)) as avg_delivery_days
from courier
group by courierid;

---2.11//List all packages with a specific weight range:
select * from courier where weight between 1.0 and 3.0;

---2.12//Retrieve employees whose names contain 'John'
select * from employee where name like '%john%';

---2.13//Retrieve all courier records with payments greater than $50.
select c.*
from courier c
join payment p on c.courierid = p.courierid
where p.amount > 50;

---Task-3---

---3.14//Find the total number of couriers handled by each employee.
-- Placeholder if assignment table exists:
alter table courier add employeeid int;
select e.employeeid, e.name as employee_name, count(c.courierid) as total_couriers_handled
from employee e
left join courier c on e.employeeid = c.employeeid
group by e.employeeid, e.name;


---3.15//. Calculate the total revenue generated by each location
select l.locationname, sum(p.amount) as total_revenue
from payment p
join location l on p.locationid = l.locationid
group by l.locationname;

---3.16//. Find the total number of couriers delivered to each location.
select l.locationname, count(p.courierid) as delivered_couriers
from payment p
join courier c on p.courierid = c.courierid
join location l on p.locationid = l.locationid
where c.status = 'Delivered'
group by l.locationname;

---3.17//Find the courier with the highest average delivery time:

select top 1 c.courierid, c.sendername, avg(datediff(day, c.orderdate, c.deliverydate)) as avg_delivery_days
from courier c
where c.orderdate is not null and c.deliverydate is not null
group by c.courierid, c.sendername
order by avg_delivery_days desc;

---3.18//Find Locations with Total Payments Less Than a Certain Amount

select locationid, sum(amount) as total_payment
from payment
group by locationid
having sum(amount) < 1000; 

---3.19//Calculate Total Payments per Location
select locationid, sum(amount) as total_payments
from payment
group by locationid;

---3.20//Retrieve couriers who have received payments totaling more than $1000 in a specific location 
---(LocationID = X):

select courierid, sum(amount) as total_payment
from payment
where locationid = 1
group by courierid
having sum(amount) > 1000;


---3.21. Retrieve couriers who have received payments totaling more than $1000 after a certain date 
---(PaymentDate > 'YYYY-MM-DD'):

select courierid, sum(amount) as total_payment
from payment
where paymentdate > '2025-04-18'
group by courierid
having sum(amount) > 1000;

---3.22//Retrieve locations where the total amount received is more than $5000 before a certain date 
---(PaymentDate > 'YYYY-MM-DD')
select locationid, sum(amount) as total_payment
from payment
where paymentdate < '2025-04-18'
group by locationid
having sum(amount) > 5000;

---Task-4---

---4.23//. Retrieve Payments with Courier Information 
select p.*, c.*
from payment p
join courier c on p.courierid = c.courierid;


---4.24. Retrieve Payments with Location Information 
select p.*, l.*
from payment p
join location l on p.locationid = l.locationid;


---4.25. Retrieve Payments with Courier and Location 
select p.*, c.*, l.*
from payment p
join courier c on p.courierid = c.courierid
join location l on p.locationid = l.locationid;


---4.26. List all payments with courier details 
select p.*, c.*
from payment p
join courier c on p.courierid = c.courierid;

---4.27. Total payments received for each courier 
select courierid, sum(amount) as total_payment
from payment
group by courierid;


---4.28. List payments made on a specific date
select * from payment where paymentdate = '2025-04-15'; -- change date

---4.29. Get Courier Information for Each Payment 
select p.*, c.*
from payment p
join courier c on p.courierid = c.courierid;

---4.30. Get Payment Details with Location 
select p.*, l.*
from payment p
join location l on p.locationid = l.locationid;

---4.31. Calculating Total Payments for Each Courier 
select courierid, sum(amount) as total_payment
from payment
group by courierid;

---4.32. List Payments Within a Date Range 
select * from payment
where paymentdate between '2025-04-01' and '2025-04-15'; -- change dates

---4.33. Retrieve a list of all users and their corresponding courier records, including cases where there are 
---no matches on either side 
select u.*, c.*
from users u
left join courier c on u.name = c.sendername
full outer join courier c2 on u.name = c2.sendername;

---4.34. Retrieve a list of all couriers and their corresponding services, including cases where there are no 
---matches on either side 
select c.*, cs.*
from courier c
left join courierservices cs on c.courierid = cs.serviceid;

---4.35. Retrieve a list of all employees and their corresponding payments, including cases where there are 
---no matches on either side 




---4.36. List all users and all courier services, showing all possible combinations. 
select * from users cross join courierservices;

---4.37. List all employees and all locations, showing all possible combinations: 
select * from employee cross join location;

--4.38. Retrieve a list of couriers and their corresponding sender information (if available) 
select * from courier where sendername is not null;

--4.39. Retrieve a list of couriers and their corresponding receiver information (if available): 
select * from courier where receivername is not null;

--4.40. Retrieve a list of couriers along with the courier service details (if available): 
select c.*, cs.*
from courier c
left join courierservices cs on c.courierid = cs.serviceid;

--4.41. Retrieve a list of employees and the number of couriers assigned to each employee: 
select e.name, count(c.courierid) as total_couriers
from employee e
left join courier c on e.employeeid = c.employeeid
group by e.name;

--4.42. Retrieve a list of locations and the total payment amount received at each location: 
select l.locationname, sum(p.amount) as total_received
from payment p
join location l on p.locationid = l.locationid
group by l.locationname;

--4.43. Retrieve all couriers sent by the same sender (based on SenderName). 
select * from courier
where sendername in (
  select sendername
  from courier
  group by sendername
  having count(*) > 1
);

--4.44. List all employees who share the same role. 
select * from employee
where role in (
  select role from employee group by role having count(*) > 1
);

--4.47. List employees and the number of couriers they have delivered: 
select e.name, count(c.courierid) as delivered_count
from employee e
join courier c on e.employeeid = c.employeeid
where c.status = 'Delivered'
group by e.name;

--4.48. Find couriers that were paid an amount greater than the cost of their respective courier services
select c.*, p.amount, cs.cost
from courier c
join payment p on c.courierid = p.courierid
join courierservices cs on c.courierid = cs.serviceid
where p.amount > cs.cost;

---Scope: Inner Queries, Non Equi Joins, Equi joins,Exist,Any,All

--4.49. Find couriers that have a weight greater than the average
select * from courier
where weight > (
  select avg(weight) from courier
);

--4.50. Find the names of all employees who have a salary greater
select * from employee
where salary > (
  select avg(salary) from employee
);
--4.51. Find the total cost of all courier services where the cos
select sum(cost) as total_cost
from courierservices
where cost < (
  select max(cost) from courierservices
);
--4.52. Find all couriers that have been paid for 
select * from courier
where courierid in (
  select courierid from payment
);

--4.53. Find the locations where the maximum payment amount was m
select locationid, amount
from payment
where amount = (
  select max(amount) from payment
);

--4.54. Find all couriers whose weight is greater than the weight
---(e.g., 'SenderName'):
select * from courier
where weight > all (
  select weight from courier
  where sendername = 'Alice Smith' -- change sender name
);















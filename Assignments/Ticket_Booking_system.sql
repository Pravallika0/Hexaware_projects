create database TicketBookingSystem;
use TicketBookingSystem;

create table venue (
    venue_id int primary key identity(1,1),
    venue_name varchar(100),
    address varchar(255)
);

create table customer (
    customer_id int primary key identity(1,1),
    customer_name varchar(100),
    email varchar(100),
    phone_number varchar(15)
);

create table event (
    event_id int primary key identity(1,1),
    event_name varchar(100),
    event_date date,
    event_time time,
    venue_id int,
    total_seats int,
    available_seats int,
    ticket_price decimal(10, 2),
    event_type varchar(20), -- enum not supported in SQL Server
    foreign key (venue_id) references venue(venue_id)
);

create table booking (
    booking_id int primary key identity(1,1),
    customer_id int,
    event_id int,
    num_tickets int,
    total_cost decimal(10, 2),
    booking_date date,
    foreign key (customer_id) references customer(customer_id),
    foreign key (event_id) references event(event_id)
);

insert into venue (venue_name, address) values
('stadium a', 'downtown city'),
('auditorium b', 'east end'),
('theater c', 'west city'),
('concert hall d', 'north zone'),
('arena e', 'south side'),
('multiplex f', 'central area'),
('cinema g', 'city center'),
('playhouse h', 'old town'),
('ground i', 'uptown'),
('studio j', 'industrial zone');


insert into customer (customer_name, email, phone_number) values
('alice', 'alice@mail.com', '9876543000'),
('bob', 'bob@mail.com', '9876543001'),
('carol', 'carol@mail.com', '9876543002'),
('dave', 'dave@mail.com', '9876543003'),
('ellen', 'ellen@mail.com', '9876543004'),
('fred', 'fred@mail.com', '9876543005'),
('grace', 'grace@mail.com', '9876543006'),
('harry', 'harry@mail.com', '9876543007'),
('ivy', 'ivy@mail.com', '9876543008'),
('jack', 'jack@mail.com', '9876543009');

insert into event (event_name, event_date, event_time, venue_id, total_seats, available_seats, ticket_price, event_type) values
('world cup final', '2025-06-10', '18:00:00', 1, 20000, 15000, 2500, 'sports'),
('rock concert', '2025-05-20', '20:00:00', 4, 15000, 3000, 2000, 'concert'),
('comedy play', '2025-04-25', '17:00:00', 3, 5000, 5000, 1000, 'movie'),
('classic concert', '2025-06-05', '19:30:00', 4, 10000, 8000, 1800, 'concert'),
('movie night', '2025-04-22', '21:00:00', 7, 3000, 2000, 1200, 'movie'),
('drama play', '2025-04-30', '16:00:00', 8, 4000, 4000, 1500, 'movie'),
('football semi-final', '2025-05-18', '17:30:00', 1, 18000, 500, 2200, 'sports'),
('rap concert', '2025-05-28', '20:00:00', 4, 16000, 15000, 2100, 'concert'),
('kabaddi night', '2025-06-12', '18:30:00', 9, 10000, 7000, 1700, 'sports'),
('horror movie', '2025-04-26', '22:00:00', 7, 2500, 2400, 900, 'movie');


insert into booking (customer_id, event_id, num_tickets, total_cost, booking_date) values
(1, 1, 5, 12500.00, '2025-04-01'),
(2, 2, 2, 4000.00, '2025-04-02'),
(3, 3, 1, 1000.00, '2025-04-03'),
(4, 4, 3, 5400.00, '2025-04-04'),
(5, 5, 4, 4800.00, '2025-04-05'),
(6, 6, 1, 1500.00, '2025-04-06'),
(7, 7, 5, 11000.00, '2025-04-07'),
(8, 8, 2, 4200.00, '2025-04-08'),
(9, 9, 3, 5100.00, '2025-04-09'),
(10, 10, 2, 1800.00, '2025-04-10');


----Task-2
-- 1. list all events
select * from event;

-- 2. select events with available tickets
select * from event where available_seats > 0;

-- 3. select events with name containing 'cup'
select * from event where event_name like '%cup%';

-- 4. select events with ticket price between 1000 and 2500
select * from event where ticket_price between 1000 and 2500;

-- 5. events within a specific date range
select * from event where event_date between '2025-04-01' and '2025-06-01';

-- 6. events with available tickets and name containing 'concert'
select * from event where available_seats > 0 and event_name like '%concert%';

-- 7. retrieve users in batches of 5, starting from 6th
select * from customer order by customer_id offset 5 rows fetch next 5 rows only;

-- 8. bookings with more than 4 tickets
select * from booking where num_tickets > 4;

-- 9. customers whose phone number ends with '000'
select * from customer where phone_number like '%000';

-- 10. events with seat capacity more than 15000
select * from event where total_seats > 15000 order by total_seats;

-- 11. events not starting with 'x', 'y', or 'z'
select * from event 
where event_name not like 'x%' and event_name not like 'y%' and event_name not like 'z%';

---Task-3---
-- 1. events and their average ticket prices
select event_name, avg(ticket_price) as avg_price 
from event 
group by event_name;

-- 2. total revenue generated by each event
select event_id, sum(total_cost) as total_revenue 
from booking 
group by event_id;

-- 3. event with highest ticket sales
select top 1 event_id, sum(num_tickets) as total_sold 
from booking 
group by event_id 
order by total_sold desc;

-- 4. total tickets sold for each event
select event_id, sum(num_tickets) as tickets_sold 
from booking 
group by event_id;

-- 5. events with no ticket sales
select * from event 
where event_id not in (select distinct event_id from booking);

-- 6. user who booked most tickets
select top 1 customer_id, sum(num_tickets) as total 
from booking 
group by customer_id 
order by total desc;

-- 7. total tickets sold per month
select format(booking_date, 'yyyy-MM') as month, sum(num_tickets) as tickets_sold 
from booking 
group by format(booking_date, 'yyyy-MM');

-- 8. average ticket price by venue
select v.venue_name, avg(e.ticket_price) as avg_price 
from event e 
join venue v on e.venue_id = v.venue_id 
group by v.venue_name;

-- 9. total tickets sold by event type
select e.event_type, sum(b.num_tickets) as tickets_sold 
from event e 
join booking b on e.event_id = b.event_id 
group by e.event_type;

-- 10. total revenue per year
select year(booking_date) as year, sum(total_cost) as revenue 
from booking 
group by year(booking_date);

-- 11. users who booked tickets for multiple events
select customer_id 
from booking 
group by customer_id 
having count(distinct event_id) > 1;

-- 12. total revenue per customer
select customer_id, sum(total_cost) as total_spent 
from booking 
group by customer_id;

-- 13. average ticket price per category and venue
select e.event_type, v.venue_name, avg(e.ticket_price) as avg_price 
from event e 
join venue v on e.venue_id = v.venue_id 
group by e.event_type, v.venue_name;

-- 14. total tickets purchased in last 30 days
select customer_id, sum(num_tickets) as tickets_bought 
from booking 
where booking_date >= dateadd(day, -30, getdate()) 
group by customer_id;


---Task-4---

-- 1. average ticket price per venue using subquery
select venue_id, 
       (select avg(ticket_price) from event e2 where e2.venue_id = e1.venue_id) as avg_price
from event e1 
group by venue_id;

-- 2. events with more than 50% tickets sold
select * from event 
where (total_seats - available_seats) > (0.5 * total_seats);

-- 3. total tickets sold for each event using subquery
select event_id, 
       (select sum(num_tickets) from booking b where b.event_id = e.event_id) as total_tickets
from event e;

-- 4. customers who never booked any tickets
select * from customer c 
where not exists (
    select 1 from booking b where b.customer_id = c.customer_id
);

-- 5. events with no ticket sales using not in
select * from event 
where event_id not in (
    select event_id from booking
);

-- 6. total tickets per event type (subquery in from)
select event_type, sum(tickets) as total_sold
from (
    select e.event_type, b.num_tickets as tickets
    from booking b 
    join event e on b.event_id = e.event_id
) as sub
group by event_type;

-- 7. events with price higher than average
select * from event 
where ticket_price > (
    select avg(ticket_price) from event
);

-- 8. revenue per customer (correlated subquery)
select c.customer_id, c.customer_name,
       (select sum(b.total_cost) from booking b where b.customer_id = c.customer_id) as total_revenue
from customer c;

-- 9. customers who booked events in venue id = 1
select * from customer 
where customer_id in (
    select b.customer_id from booking b 
    join event e on b.event_id = e.event_id 
    where e.venue_id = 1
);

-- 10. total tickets per category using subquery with group by
select event_type, sum(num_tickets) as total_sold
from (
    select e.event_type, b.num_tickets 
    from booking b 
    join event e on b.event_id = e.event_id
) as sub
group by event_type;

-- 11. customers who booked tickets each month
select distinct customer_id 
from booking 
where format(booking_date, 'yyyy-MM') in (
    select format(booking_date, 'yyyy-MM') from booking
);

-- 12. average ticket price per venue using subquery
select v.venue_id, v.venue_name, 
       (select avg(ticket_price) from event e where e.venue_id = v.venue_id) as avg_price
from venue v;
